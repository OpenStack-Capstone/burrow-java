package org.openstack.burrow.example.syslog;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.regex.Pattern;
import java.util.LinkedList;
import java.util.regex.PatternSyntaxException;

public class SyslogHUD {
    private JPanel panel1;
    private JTextField searchbox;
    private JList messageList;
    private JButton backButton;
    private JLabel info;
    private BaseList<LogEntry> entries;
    private ListView<LogEntry> current;
    private LinkedList<ListView<LogEntry>> views;

    public void embedIn(JFrame f) {
        f.add(panel1);
    }

    public SyslogHUD() {
        entries = new BaseList<LogEntry>();
        current = entries;
        messageList.setModel(entries);
        views = new LinkedList<ListView<LogEntry>>();

        messageList.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent keyEvent) {
                if (keyEvent.getKeyCode() == KeyEvent.VK_DELETE) {
                    int offset = 0;
                    for (int i : messageList.getSelectedIndices()) {
                        current.remove(i - offset);
                        offset++;
                        messageList.updateUI();
                    }
                }
            }
        });

        backButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent actionEvent) {

                current = views.remove(0);
                messageList.setModel(current);

                if (current == entries) {
                    backButton.setEnabled(false);
                    return;
                }

                messageList.updateUI();
            }
        });

        searchbox.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent actionEvent) {
                String text = searchbox.getText();
                if ("".equals(text)) return;

                Pattern search1 = null;
                try {
                    search1 = Pattern.compile(text);
                } catch (PatternSyntaxException pse) {
                    info.setText("Error: Could not parse search regex.");
                    info.setBackground(Color.red);
                    return;
                }
                final Pattern search = search1;
                info.setText("");
                info.setBackground(new Color(214, 214, 214));//Gray used by UI designer

                ListView<LogEntry> view = current.getListView(new Filter<LogEntry>() {
                    public boolean accept(LogEntry item) {
                        return search.matcher(item.toString()).matches();
                    }
                });

                views.add(current);
                messageList.setModel(view);
                current = view;
                backButton.setEnabled(true);
                messageList.updateUI();
            }
        });
        searchbox.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent mouseEvent) {
                super.mouseClicked(mouseEvent);
                info.setText("");
                info.setBackground(new Color(214, 214, 214));//Gray used by UI designer
            }
        });
    }

    public synchronized void addEntry(LogEntry logEntry) {
        entries.add(logEntry);
        messageList.updateUI();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new BorderLayout(0, 0));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, BorderLayout.NORTH);
        searchbox = new JTextField();
        panel2.add(searchbox, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        backButton = new JButton();
        backButton.setEnabled(false);
        backButton.setText("Back");
        panel2.add(backButton, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        info = new JLabel();
        info.setText("");
        panel2.add(info, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel1.add(scrollPane1, BorderLayout.CENTER);
        messageList = new JList();
        final DefaultListModel defaultListModel1 = new DefaultListModel();
        messageList.setModel(defaultListModel1);
        scrollPane1.setViewportView(messageList);
    }

    /** @noinspection ALL */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }
}

package org.openstack.burrow.example.syslog;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import org.json.Test;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.regex.Pattern;
import java.util.LinkedList;
import java.util.regex.PatternSyntaxException;

public class SyslogHUD {
    private JPanel panel1;
    private JTextField searchbox;
    private JList messageList;
    private JButton backButton;
    private JLabel info;
    private BaseList<LogEntry> entries;
    private ListView<LogEntry> current;
    private LinkedList<ListView<LogEntry>> views;

    public void embedIn(JFrame f) {
        f.add(panel1);
    }

    public SyslogHUD() {
        entries = new BaseList<LogEntry>();
        current = entries;
        messageList.setModel(entries);
        views = new LinkedList<ListView<LogEntry>>();

        messageList.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent keyEvent) {
                if (keyEvent.getKeyCode() == KeyEvent.VK_DELETE) {
                    int offset = 0;
                    for (int i : messageList.getSelectedIndices()) {
                        current.remove(i - offset);
                        offset++;
                        messageList.updateUI();
                    }
                }
            }
        });

        backButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent actionEvent) {

                System.out.println(entries + " 1=! " + current + " stack: " + views.size());

                current = views.pollFirst();
                messageList.setModel(current);

                System.out.println(entries + " 2=! " + current + " stack: " + views.size() + "\n");

                if (current == entries) {
                    backButton.setEnabled(false);
                }

                int i = 0;
                for (ListView lv : views) {
                    System.out.println(i + ": " + lv);
                    i++;
                }

                messageList.updateUI();
            }
        });
        searchbox.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent actionEvent) {
                String text = searchbox.getText();
                if ("".equals(text)) return;
                System.out.println(entries + " 1=? " + current + " stack: " + views.size());

                Pattern search1 = null;
                try {
                    search1 = Pattern.compile(".*" + text + ".*");
                } catch (PatternSyntaxException pse) {
                    System.out.println("Pattern parse fail");
                    info.setText("Error: Could not parse search regex.");
                    info.setBackground(Color.red);
                    info.updateUI();
                    return;
                }
                final Pattern search = search1;
                info.setText("");
                info.setBackground(new Color(214, 214, 214));//Gray used by UI designer

                ListView<LogEntry> view = current.getListView(new Filter<LogEntry>() {
                    public boolean accept(LogEntry item) {
                        return search.matcher(item.toString()).matches();
                    }
                });

                views.offerFirst(current);
                messageList.setModel(view);
                current = view;

                int i = 0;
                for (ListView lv : views) {
                    System.out.println(i + ": " + lv);
                    i++;
                }

                System.out.println(entries + " 2=? " + current + " stack: " + views.size() + "\n");

                backButton.setEnabled(true);
                messageList.updateUI();
            }
        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new BorderLayout(0, 0));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, BorderLayout.NORTH);
        searchbox = new JTextField();
        panel2.add(searchbox, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        backButton = new JButton();
        backButton.setEnabled(false);
        backButton.setText("Back");
        panel2.add(backButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        info = new JLabel();
        info.setText("");
        panel2.add(info, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel1.add(scrollPane1, BorderLayout.CENTER);
        messageList = new JList();
        final DefaultListModel defaultListModel1 = new DefaultListModel();
        messageList.setModel(defaultListModel1);
        scrollPane1.setViewportView(messageList);
    }

    /** @noinspection ALL */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }


    private class EntryAdder extends SwingWorker<Object, Object> {
        private LogEntry logEntry;

        public EntryAdder(LogEntry logEntry) {
            this.logEntry = logEntry;
        }

        protected LogEntry doInBackground() throws Exception {
            entries.add(logEntry);
            messageList.updateUI();
            return null;
        }
    }

    public void addEntry(LogEntry logEntry) {
        new EntryAdder(logEntry).execute();
    }


    /** @noinspection ALL */


}
